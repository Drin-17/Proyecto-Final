// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ProyectoFinal.models.FreeToPLay;
//
//    var freeToPlayResponse = FreeToPlayResponse.FromJson(jsonString);

namespace ProyectoFinal.models.FreeToPLay
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using Proyecto_Final.Models.DataSource;

    public partial class FreeToPlayResponse
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("thumbnail")]
        public Uri Thumbnail { get; set; }

        [JsonProperty("short_description")]
        public string ShortDescription { get; set; }

        [JsonProperty("game_url")]
        public Uri GameUrl { get; set; }

        [JsonProperty("genre")]
        public Genre Genre { get; set; }

        [JsonProperty("platform")]
        public Platform Platform { get; set; }

        [JsonProperty("publisher")]
        public string Publisher { get; set; }

        [JsonProperty("developer")]
        public string Developer { get; set; }

        [JsonProperty("release_date")]
        public string ReleaseDate { get; set; }

        [JsonProperty("freetogame_profile_url")]
        public Uri FreetogameProfileUrl { get; set; }
    }

    public enum Genre { BattleRoyale, Fighting, Mmo, Mmorpg, Moba, Shooter, Strategy };

    public enum Platform { PcWindows, PcWindowsWebBrowser, WebBrowser };

    public partial class FreeToPlayResponse
    {
        public static List<FreeToPlayResponse> FromJson(string json) => JsonConvert.DeserializeObject<List<FreeToPlayResponse>>(json, ProyectoFinal.models.FreeToPLay.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<FreeToPlayResponse> self) => JsonConvert.SerializeObject(self, ProyectoFinal.models.FreeToPLay.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                GenreConverter.Singleton,
                PlatformConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class GenreConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Genre) || t == typeof(Genre?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Battle Royale":
                    return Genre.BattleRoyale;
                case "Fighting":
                    return Genre.Fighting;
                case "MMO":
                    return Genre.Mmo;
                case "MMORPG":
                    return Genre.Mmorpg;
                case "MOBA":
                    return Genre.Moba;
                case "Shooter":
                    return Genre.Shooter;
                case "Strategy":
                    return Genre.Strategy;
                default:
                    return null;
            }
            FreeToPlayDataSource dataSource = new FreeToPlayDataSource("https://free-to-play-games-database.p.rapidapi.com/api/games", "560084a670msh5de3cbe7a12fc50p11a25ajsna456d2fe54ba"); throw new Exception("Cannot unmarshal type Genre");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Genre)untypedValue;
            switch (value)
            {
                case Genre.BattleRoyale:
                    serializer.Serialize(writer, "Battle Royale");
                    return;
                case Genre.Fighting:
                    serializer.Serialize(writer, "Fighting");
                    return;
                case Genre.Mmo:
                    serializer.Serialize(writer, "MMO");
                    return;
                case Genre.Mmorpg:
                    serializer.Serialize(writer, "MMORPG");
                    return;
                case Genre.Moba:
                    serializer.Serialize(writer, "MOBA");
                    return;
                case Genre.Shooter:
                    serializer.Serialize(writer, "Shooter");
                    return;
                case Genre.Strategy:
                    serializer.Serialize(writer, "Strategy");
                    return;
            }
            throw new Exception("Cannot marshal type Genre");
        }


        public static readonly GenreConverter Singleton = new GenreConverter();
    }

    internal class PlatformConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Platform) || t == typeof(Platform?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "PC (Windows)":
                    return Platform.PcWindows;
                case "PC (Windows), Web Browser":
                    return Platform.PcWindowsWebBrowser;
                case "Web Browser":
                    return Platform.WebBrowser;
            }
            throw new Exception("Cannot unmarshal type Platform");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Platform)untypedValue;
            switch (value)
            {
                case Platform.PcWindows:
                    serializer.Serialize(writer, "PC (Windows)");
                    return;
                case Platform.PcWindowsWebBrowser:
                    serializer.Serialize(writer, "PC (Windows), Web Browser");
                    return;
                case Platform.WebBrowser:
                    serializer.Serialize(writer, "Web Browser");
                    return;
            }
            throw new Exception("Cannot marshal type Platform");
        }

        public static readonly PlatformConverter Singleton = new PlatformConverter();
    }
}
