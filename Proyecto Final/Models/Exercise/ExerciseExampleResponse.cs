// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ProyectoFinal.Models.Exercise;
//
//    var exerciseExampleResponse = ExerciseExampleResponse.FromJson(jsonString);

namespace ProyectoFinal.Models.Exercise
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ExerciseExampleResponse
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("muscle")]
        public Muscle Muscle { get; set; }

        [JsonProperty("equipment")]
        public string Equipment { get; set; }

        [JsonProperty("difficulty")]
        public Difficulty Difficulty { get; set; }

        [JsonProperty("instructions")]
        public string Instructions { get; set; }
    }

    public enum Difficulty { Beginner, Intermediate };

    public enum Muscle { Biceps };

    public enum TypeEnum { Strength };

    public partial class ExerciseExampleResponse
    {
        public static List<ExerciseExampleResponse> FromJson(string json) => JsonConvert.DeserializeObject<List<ExerciseExampleResponse>>(json, ProyectoFinal.Models.Exercise.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<ExerciseExampleResponse> self) => JsonConvert.SerializeObject(self, ProyectoFinal.Models.Exercise.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                DifficultyConverter.Singleton,
                MuscleConverter.Singleton,
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class DifficultyConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Difficulty) || t == typeof(Difficulty?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "beginner":
                    return Difficulty.Beginner;
                case "intermediate":
                    return Difficulty.Intermediate;
            }
            throw new Exception("Cannot unmarshal type Difficulty");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Difficulty)untypedValue;
            switch (value)
            {
                case Difficulty.Beginner:
                    serializer.Serialize(writer, "beginner");
                    return;
                case Difficulty.Intermediate:
                    serializer.Serialize(writer, "intermediate");
                    return;
            }
            throw new Exception("Cannot marshal type Difficulty");
        }

        public static readonly DifficultyConverter Singleton = new DifficultyConverter();
    }

    internal class MuscleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Muscle) || t == typeof(Muscle?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "biceps")
            {
                return Muscle.Biceps;
            }
            throw new Exception("Cannot unmarshal type Muscle");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Muscle)untypedValue;
            if (value == Muscle.Biceps)
            {
                serializer.Serialize(writer, "biceps");
                return;
            }
            throw new Exception("Cannot marshal type Muscle");
        }

        public static readonly MuscleConverter Singleton = new MuscleConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "strength")
            {
                return TypeEnum.Strength;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            if (value == TypeEnum.Strength)
            {
                serializer.Serialize(writer, "strength");
                return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
