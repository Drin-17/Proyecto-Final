// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Proyecto_Final.Models.Spotify;
//
//    var spotifyTrackResponse = SpotifyTrackResponse.FromJson(jsonString);

namespace Proyecto_Final.Models.Spotify
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class SpotifyTrackResponse
    {
        [JsonProperty("uri")]
        public string Uri { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("albumOfTrack")]
        public AlbumOfTrack AlbumOfTrack { get; set; }

        [JsonProperty("artists")]
        public Artists Artists { get; set; }

        [JsonProperty("contentRating")]
        public ContentRating ContentRating { get; set; }

        [JsonProperty("duration")]
        public Duration Duration { get; set; }

        [JsonProperty("playability")]
        public Playability Playability { get; set; }

        [JsonProperty("youtube")]
        public Youtube Youtube { get; set; }
    }

    public partial class AlbumOfTrack
    {
        [JsonProperty("uri")]
        public string Uri { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("coverArt")]
        public CoverArt CoverArt { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class CoverArt
    {
        [JsonProperty("sources")]
        public List<Source> Sources { get; set; }
    }

    public partial class Source
    {
        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("width")]
        public long Width { get; set; }

        [JsonProperty("height")]
        public long Height { get; set; }
    }

    public partial class Artists
    {
        [JsonProperty("items")]
        public List<Item> Items { get; set; }
    }

    public partial class Item
    {
        [JsonProperty("uri")]
        public string Uri { get; set; }

        [JsonProperty("profile")]
        public Profile Profile { get; set; }
    }

    public partial class Profile
    {
        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class ContentRating
    {
        [JsonProperty("label")]
        public string Label { get; set; }
    }

    public partial class Duration
    {
        [JsonProperty("totalMilliseconds")]
        public long TotalMilliseconds { get; set; }

        [JsonProperty("seconds")]
        public double Seconds { get; set; }
    }

    public partial class Playability
    {
        [JsonProperty("playable")]
        public bool Playable { get; set; }
    }

    public partial class Youtube
    {
        [JsonProperty("videoId")]
        public string VideoId { get; set; }

        [JsonProperty("duration")]
        public long Duration { get; set; }

        [JsonProperty("download")]
        public List<Download> Download { get; set; }

        [JsonProperty("search_term")]
        public string SearchTerm { get; set; }
    }

    public partial class Download
    {
        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("duration")]
        public double Duration { get; set; }

        [JsonProperty("size")]
        public string Size { get; set; }

        [JsonProperty("format")]
        public string Format { get; set; }
    }

    public partial class SpotifyTrackResponse
    {
        public static SpotifyTrackResponse FromJson(string json) => JsonConvert.DeserializeObject<SpotifyTrackResponse>(json, Proyecto_Final.Models.Spotify.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this SpotifyTrackResponse self) => JsonConvert.SerializeObject(self, Proyecto_Final.Models.Spotify.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
