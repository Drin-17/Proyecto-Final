// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Proyecto_Final.Models.Puntuaciónenvivo;
//
//    var puntuaciónenvivoTrackResponse = PuntuaciónenvivoTrackResponse.FromJson(jsonString);

namespace Proyecto_Final.Models.Puntuaciónenvivo
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PuntuaciónenvivoTrackResponse
    {
        [JsonProperty("Stages")]
        public List<Stage> Stages { get; set; }
    }

    public partial class Event
    {
        [JsonProperty("Eid")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Eid { get; set; }

        [JsonProperty("Pids")]
        public Dictionary<string, string> Pids { get; set; }

        [JsonProperty("Sids")]
        public Dictionary<string, string> Sids { get; set; }

        [JsonProperty("Tr1")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Tr1 { get; set; }

        [JsonProperty("Tr2")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Tr2 { get; set; }

        [JsonProperty("Trh1")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Trh1 { get; set; }

        [JsonProperty("Trh2")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Trh2 { get; set; }

        [JsonProperty("Tr1OR")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Tr1Or { get; set; }

        [JsonProperty("Tr2OR")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Tr2Or { get; set; }

        [JsonProperty("T1")]
        public List<T1> T1 { get; set; }

        [JsonProperty("T2")]
        public List<T1> T2 { get; set; }

        [JsonProperty("Eps")]
        public string Eps { get; set; }

        [JsonProperty("Esid")]
        public long Esid { get; set; }

        [JsonProperty("Epr")]
        public long Epr { get; set; }

        [JsonProperty("Ecov")]
        public long Ecov { get; set; }

        [JsonProperty("Ern", NullValueHandling = NullValueHandling.Ignore)]
        public long? Ern { get; set; }

        [JsonProperty("ErnInf", NullValueHandling = NullValueHandling.Ignore)]
        public string ErnInf { get; set; }

        [JsonProperty("Et")]
        public long Et { get; set; }

        [JsonProperty("Esd")]
        public long Esd { get; set; }

        [JsonProperty("LuUT", NullValueHandling = NullValueHandling.Ignore)]
        public long? LuUt { get; set; }

        [JsonProperty("Eact")]
        public long Eact { get; set; }

        [JsonProperty("EO")]
        public long Eo { get; set; }

        [JsonProperty("EOX")]
        public long Eox { get; set; }

        [JsonProperty("IncsX")]
        public long IncsX { get; set; }

        [JsonProperty("ComX")]
        public long ComX { get; set; }

        [JsonProperty("LuX")]
        public long LuX { get; set; }

        [JsonProperty("StatX")]
        public long StatX { get; set; }

        [JsonProperty("SubsX")]
        public long SubsX { get; set; }

        [JsonProperty("SDFowX")]
        public long SdFowX { get; set; }

        [JsonProperty("SDInnX")]
        public long SdInnX { get; set; }

        [JsonProperty("LuC")]
        public long LuC { get; set; }

        [JsonProperty("Ehid")]
        public long Ehid { get; set; }

        [JsonProperty("Spid")]
        public long Spid { get; set; }

        [JsonProperty("Stg")]
        public Stage Stg { get; set; }

        [JsonProperty("Pid")]
        public long Pid { get; set; }

        [JsonProperty("Ewt", NullValueHandling = NullValueHandling.Ignore)]
        public long? Ewt { get; set; }

        [JsonProperty("Edf", NullValueHandling = NullValueHandling.Ignore)]
        public long? Edf { get; set; }
    }

    public partial class Stage
    {
        [JsonProperty("Sid")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Sid { get; set; }

        [JsonProperty("Snm")]
        public string Snm { get; set; }

        [JsonProperty("Scd")]
        public string Scd { get; set; }

        [JsonProperty("badgeUrl", NullValueHandling = NullValueHandling.Ignore)]
        public string BadgeUrl { get; set; }

        [JsonProperty("firstColor", NullValueHandling = NullValueHandling.Ignore)]
        public string FirstColor { get; set; }

        [JsonProperty("Cid")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Cid { get; set; }

        [JsonProperty("Cnm")]
        public string Cnm { get; set; }

        [JsonProperty("Csnm")]
        public string Csnm { get; set; }

        [JsonProperty("Ccd")]
        public string Ccd { get; set; }

        [JsonProperty("CompId", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? CompId { get; set; }

        [JsonProperty("CompN", NullValueHandling = NullValueHandling.Ignore)]
        public string CompN { get; set; }

        [JsonProperty("CompD", NullValueHandling = NullValueHandling.Ignore)]
        public string CompD { get; set; }

        [JsonProperty("CompST", NullValueHandling = NullValueHandling.Ignore)]
        public string CompSt { get; set; }

        [JsonProperty("Scu")]
        public long Scu { get; set; }

        [JsonProperty("Chi")]
        public long Chi { get; set; }

        [JsonProperty("Shi")]
        public long Shi { get; set; }

        [JsonProperty("Ccdiso")]
        public string Ccdiso { get; set; }

        [JsonProperty("Sdn")]
        public string Sdn { get; set; }

        [JsonProperty("Events", NullValueHandling = NullValueHandling.Ignore)]
        public List<Event> Events { get; set; }

        [JsonProperty("Sds", NullValueHandling = NullValueHandling.Ignore)]
        public string Sds { get; set; }
    }

    public partial class T1
    {
        [JsonProperty("Nm")]
        public string Nm { get; set; }

        [JsonProperty("ID")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("Img")]
        public string Img { get; set; }

        [JsonProperty("Abr")]
        public string Abr { get; set; }

        [JsonProperty("tbd")]
        public long Tbd { get; set; }

        [JsonProperty("Gd")]
        public long Gd { get; set; }

        [JsonProperty("Pids")]
        public Dictionary<string, List<string>> Pids { get; set; }

        [JsonProperty("CoNm")]
        public string CoNm { get; set; }

        [JsonProperty("CoId")]
        public string CoId { get; set; }

        [JsonProperty("HasVideo")]
        public bool HasVideo { get; set; }
    }

    public partial class PuntuaciónenvivoTrackResponse
    {
        public static PuntuaciónenvivoTrackResponse FromJson(string json) => JsonConvert.DeserializeObject<PuntuaciónenvivoTrackResponse>(json, Proyecto_Final.Models.Puntuaciónenvivo.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PuntuaciónenvivoTrackResponse self) => JsonConvert.SerializeObject(self, Proyecto_Final.Models.Puntuaciónenvivo.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
