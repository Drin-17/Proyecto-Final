// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using DigitalsoftWebApp.Models.Receta;
//
//    var recetaTrackRespone = RecetaTrackRespone.FromJson(jsonString);

namespace Proyecto_Final.Models.Receta
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class RecetaTrackRespone
    {
        [JsonProperty("s")]
        public long S { get; set; }

        [JsonProperty("d")]
        public List<D> D { get; set; }

        [JsonProperty("t")]
        public long T { get; set; }

        [JsonProperty("p")]
        public P P { get; set; }
    }

    public partial class D
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("Title")]
        public string Title { get; set; }

        [JsonProperty("Ingredients")]
        public Dictionary<string, string> Ingredients { get; set; }

        [JsonProperty("Instructions")]
        public string Instructions { get; set; }

        [JsonProperty("Image")]
        public string Image { get; set; }
    }

    public partial class P
    {
        [JsonProperty("limitstart")]
        public long Limitstart { get; set; }

        [JsonProperty("limit")]
        public long Limit { get; set; }

        [JsonProperty("total")]
        public long Total { get; set; }

        [JsonProperty("pagesStart")]
        public long PagesStart { get; set; }

        [JsonProperty("pagesStop")]
        public long PagesStop { get; set; }

        [JsonProperty("pagesCurrent")]
        public long PagesCurrent { get; set; }

        [JsonProperty("pagesTotal")]
        public long PagesTotal { get; set; }
    }

    public partial class RecetaTrackRespone
    {
        public static RecetaTrackRespone FromJson(string json) => JsonConvert.DeserializeObject<RecetaTrackRespone>(json, Proyecto_Final.Models.Receta.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this RecetaTrackRespone self) => JsonConvert.SerializeObject(self, Proyecto_Final.Models.Receta.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}