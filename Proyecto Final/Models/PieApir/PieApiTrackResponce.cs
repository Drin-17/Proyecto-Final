// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using DijitalSftwafeModelPieApi;
//
//    var pieApiTrackResponce = PieApiTrackResponce.FromJson(jsonString);

namespace DijitalSftwafeModelPieApi
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PieApiTrackResponce
    {
        [JsonProperty("results")]
        public List<Result> Results { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("entity")]
        public Entity Entity { get; set; }

        [JsonProperty("score")]
        public double Score { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }
    }

    public partial class Entity
    {
        [JsonProperty("category", NullValueHandling = NullValueHandling.Ignore)]
        public Category Category { get; set; }

        [JsonProperty("country")]
        public Country Country { get; set; }

        [JsonProperty("displayInverseHomeAwayTeams", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DisplayInverseHomeAwayTeams { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("slug")]
        public string Slug { get; set; }

        [JsonProperty("userCount")]
        public long UserCount { get; set; }

        [JsonProperty("disabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Disabled { get; set; }

        [JsonProperty("gender", NullValueHandling = NullValueHandling.Ignore)]
        public string Gender { get; set; }

        [JsonProperty("nameCode", NullValueHandling = NullValueHandling.Ignore)]
        public string NameCode { get; set; }

        [JsonProperty("national", NullValueHandling = NullValueHandling.Ignore)]
        public bool? National { get; set; }

        [JsonProperty("shortName", NullValueHandling = NullValueHandling.Ignore)]
        public string ShortName { get; set; }

        [JsonProperty("sport", NullValueHandling = NullValueHandling.Ignore)]
        public Sport Sport { get; set; }

        [JsonProperty("teamColors", NullValueHandling = NullValueHandling.Ignore)]
        public TeamColors TeamColors { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public long? Type { get; set; }
    }

    public partial class Category
    {
        [JsonProperty("flag")]
        public string Flag { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("slug")]
        public string Slug { get; set; }

        [JsonProperty("sport")]
        public Sport Sport { get; set; }

        [JsonProperty("alpha2", NullValueHandling = NullValueHandling.Ignore)]
        public string Alpha2 { get; set; }
    }

    public partial class Sport
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public Name Name { get; set; }

        [JsonProperty("slug")]
        public Slug Slug { get; set; }
    }

    public partial class Country
    {
        [JsonProperty("alpha2", NullValueHandling = NullValueHandling.Ignore)]
        public string Alpha2 { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }
    }

    public partial class TeamColors
    {
        [JsonProperty("primary")]
        public string Primary { get; set; }

        [JsonProperty("secondary")]
        public string Secondary { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }
    }

    public enum Name { Football };

    public enum Slug { Football };

    public enum TypeEnum { Team, UniqueTournament };

    public partial class PieApiTrackResponce
    {
        public static PieApiTrackResponce FromJson(string json) => JsonConvert.DeserializeObject<PieApiTrackResponce>(json, DijitalSftwafeModelPieApi.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PieApiTrackResponce self) => JsonConvert.SerializeObject(self, DijitalSftwafeModelPieApi.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                NameConverter.Singleton,
                SlugConverter.Singleton,
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class NameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Name) || t == typeof(Name?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Football")
            {
                return Name.Football;
            }
            throw new Exception("Cannot unmarshal type Name");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Name)untypedValue;
            if (value == Name.Football)
            {
                serializer.Serialize(writer, "Football");
                return;
            }
            throw new Exception("Cannot marshal type Name");
        }

        public static readonly NameConverter Singleton = new NameConverter();
    }

    internal class SlugConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Slug) || t == typeof(Slug?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "football")
            {
                return Slug.Football;
            }
            throw new Exception("Cannot unmarshal type Slug");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Slug)untypedValue;
            if (value == Slug.Football)
            {
                serializer.Serialize(writer, "football");
                return;
            }
            throw new Exception("Cannot marshal type Slug");
        }

        public static readonly SlugConverter Singleton = new SlugConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "team":
                    return TypeEnum.Team;
                case "uniqueTournament":
                    return TypeEnum.UniqueTournament;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Team:
                    serializer.Serialize(writer, "team");
                    return;
                case TypeEnum.UniqueTournament:
                    serializer.Serialize(writer, "uniqueTournament");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
